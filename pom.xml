<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>table-types-gen</groupId>
  <artifactId>table-types-gen</artifactId>
  <version>1.0</version>
  <packaging>jar</packaging>
  <name>table-types-gen</name>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.release>21</java.release>
    <min-maven-version>3.8.0</min-maven-version>
    <compiler-plugin.version>3.11.0</compiler-plugin.version>
    <checker-framework.version>3.47.0</checker-framework.version>
    <versions-plugin-version>2.16.0</versions-plugin-version>
    <enforcer-plugin-version>3.4.1</enforcer-plugin-version>
    <exec-plugin-version>3.4.1</exec-plugin-version>
    <maven.plugin.validation>VERBOSE</maven.plugin.validation>
    <help-plugin-version>3.4.0</help-plugin-version>
    <jshell-plugin-version>1.4</jshell-plugin-version>
    <pg.jdbc.version>42.7.4</pg.jdbc.version>
    <jackson.version>2.18.0</jackson.version>
    <!-- Properties intended to be customized via -D args with project specific settings. -->
    <db.props>${project.basedir}/jdbc.props</db.props>
    <dbmd.file>${project.basedir}/dbmd.json</dbmd.file>
    <tabletypes.customization.file/>
    <propname.style>DB</propname.style>
    <paramname.style>DB</paramname.style>
    <tablename.style>DB_INITCAP</tablename.style>
    <schema.classname.prefix/>
    <java.base.dir>src/main/java</java.base.dir>
    <java.package>generated.tabletypes</java.package>
  </properties>
  <dependencies>
    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>checker-qual</artifactId>
      <version>${checker-framework.version}</version>
    </dependency>
    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>checker</artifactId>
      <version>${checker-framework.version}</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${pg.jdbc.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <!-- Compiler plugin with customizations for Checker Framework. -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${compiler-plugin.version}</version>
        <configuration>
          <release>${java.release}</release>
          <showWarnings>true</showWarnings>
          <!-- Must fork or else JVM arguments are ignored. -->
          <fork>true</fork>
          <annotationProcessorPaths>
            <path>
              <groupId>org.checkerframework</groupId>
              <artifactId>checker</artifactId>
              <version>${checker-framework.version}</version>
            </path>
          </annotationProcessorPaths>
          <annotationProcessors>
            <annotationProcessor>org.checkerframework.checker.nullness.NullnessChecker</annotationProcessor>
          </annotationProcessors>
          <compilerArgs>
            <arg>-Xmaxerrs</arg>
            <arg>10000</arg>
            <arg>-Xmaxwarns</arg>
            <arg>10000</arg>
            <!-- <arg>-Awarns</arg> -->       <!-- -Awarns turns type-checking errors into warnings. -->
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>
            <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <!-- Enforcer plugin for requiring range of Maven versions in support of versions plugin below. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${enforcer-plugin-version}</version>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>${min-maven-version}</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>${java.release}</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Maven versions plugin to assist with managing versions of plugins, dependencies etc in this pom file.
             mvn versions:display-plugin-updates
             mvn versions:display-dependency-updates
        -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>${versions-plugin-version}</version>
        <configuration>
          <generateBackupPoms>false</generateBackupPoms>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-help-plugin</artifactId>
        <version>${help-plugin-version}</version>
      </plugin>
      <!-- Maven jshell plugin: mvn compile jshell:run     -->
      <plugin>
        <groupId>com.github.johnpoth</groupId>
        <artifactId>jshell-maven-plugin</artifactId>
        <version>${jshell-plugin-version}</version>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>gen-dbmd</id>
      <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-plugin-version}</version>
                <configuration>
                    <mainClass>tabletypesgen.Queryer</mainClass>
                    <arguments>
                      <argument>--query-file</argument>
                      <argument>${project.basedir}/dbmd.sql</argument>
                      <argument>--output-file</argument>
                      <argument>${dbmd.file}</argument>
                      <!-- positional args -->
                      <argument>${db.props}</argument>
                  </arguments>
                </configuration>
            </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>gen-table-types</id>
      <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-plugin-version}</version>
                <configuration>
                    <mainClass>tabletypesgen.TableTypesGenerator</mainClass>
                    <arguments>
                      <argument>--customization-file</argument>
                      <argument>${tabletypes.customization.file}</argument>
                      <argument>--propname-style</argument>
                      <argument>${propname.style}</argument>
                      <argument>--paramname-style</argument>
                      <argument>${paramname.style}</argument>
                      <argument>--tablename-style</argument>
                      <argument>${tablename.style}</argument>
                      <argument>--schema-classname-prefix</argument>
                      <argument>${schema.classname.prefix}</argument>
                      <!-- positional args -->
                      <argument>${dbmd.file}</argument>
                      <argument>${java.base.dir}</argument>
                      <argument>${java.package}</argument>
                  </arguments>
                </configuration>
            </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
